# -*- coding: utf-8 -*-
"""healthcheckerapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HF3HtWcbGulDItoUdLITLyXfq1P2dbK5
"""

!pip install streamlit

!ls -lh /content/brain_model.h5

import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing import image
from PIL import Image

# Constants
IMG_SIZE = 224
inv_labels = {
    0: 'MildDemented',
    1: 'ModerateDemented',
    2: 'NonDemented',
    3: 'VeryMildDemented'
}

# Load models
@st.cache_resource
def load_models():
    covid_model = tf.keras.models.load_model('covid_model.h5')
    brain_model = tf.keras.models.load_model('brain_model.h5')
    alz_model = tf.keras.models.load_model('Alzheimer_model.h5')
    return covid_model, brain_model, alz_model

covid_model, brain_model, alz_model = load_models()

# UI Layout
st.set_page_config(page_title="Online Health Checker", layout="centered")
st.markdown("<h1 style='text-align: center;'>ðŸ©º Online Health Checker</h1>", unsafe_allow_html=True)

# Option Selection
option = st.radio(
    "ðŸ§ª Select Diagnosis Type:",
    ("Covid Detection", "Brain Tumor Detection", "Alzheimer's Detection"),
    horizontal=True
)

# File Upload
uploaded_file = st.file_uploader("ðŸ“¤ Upload an Image", type=['jpg', 'jpeg', 'png'])

if uploaded_file is not None:
    # Show uploaded image
    img = Image.open(uploaded_file).convert('RGB')
    st.image(img, caption='ðŸ“¸ Uploaded Image', use_column_width=True)

    # Preprocess image
    img = img.resize((IMG_SIZE, IMG_SIZE))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Prediction based on selected model
    if option == "Covid Detection":
        prediction = covid_model.predict(img_array)
        result = "ðŸŸ¢ COVID Negative" if prediction[0][0] < 0.5 else "ðŸ”´ COVID Positive"
        st.subheader("Result: " + result)

    elif option == "Brain Tumor Detection":
        prediction = brain_model.predict(img_array)
        result = "ðŸ§  No Brain Tumor" if prediction[0][0] < 0.5 else "ðŸš¨ Brain Tumor Detected"
        st.subheader("Result: " + result)

    elif option == "Alzheimer's Detection":
        prediction = alz_model.predict(img_array)
        class_index = np.argmax(prediction)
        class_name = inv_labels[class_index]
        if class_name == "NonDemented":
            st.subheader("ðŸ§“ Result: No Alzheimer's Detected")
        else:
            st.subheader(f"ðŸ§  Alzheimer's Stage Detected: {class_name}")
