# -*- coding: utf-8 -*-
"""healthcheckerapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HF3HtWcbGulDItoUdLITLyXfq1P2dbK5
"""

!pip install streamlit

!ls -lh /content/brain_model.h5

import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import os

# Constants
IMG_SIZE = 224

# Class-to-model mapping
CLASS_MODEL_MAP = {
    "covid": "covid_model.h5",
    "brain": "brain_model.h5",
    "alzheimer": "Alzheimer_model.h5"
}

# Label mappings
CLASS_LABELS = {
    "alzheimer": ["NonDemented", "VeryMildDemented", "MildDemented", "ModerateDemented"],
    "brain": ["No Tumor", "Tumor"]
}

def predict_image(model_path, image_file, is_binary=True, inv_labels=None):
    model = load_model(model_path)
    st.success(f"‚úÖ Model Loaded: {os.path.basename(model_path)}")

    # Display image
    img = load_img(image_file, target_size=(IMG_SIZE, IMG_SIZE))
    st.image(img, caption="Uploaded Image", use_column_width=True)

    # Preprocess
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    # Predict
    prediction = model.predict(img_array)

    # Output
    if is_binary:
        score = prediction[0][0]
        st.write("üîç Prediction Score:", score)
        if score <= 0.5:
            st.error("üß™ Result: Positive")
        else:
            st.success("üß™ Result: Negative")
    else:
        index = np.argmax(prediction)
        label = inv_labels[index] if inv_labels else f"Class {index}"
        st.write("üîç Prediction Probabilities:", prediction[0])
        st.info(f"üß† Predicted Class: {label}")

# Streamlit UI
st.title("üß¨ Multi-Disease Image Classifier")

st.markdown("**Available Classes:** `covid`, `brain`, `alzheimer`")
class_name = st.text_input("üìå Enter the class you want to test").strip().lower()

if class_name:
    st.write(f"üîé Selected Class: **{class_name}**")

    if class_name in CLASS_MODEL_MAP:
        uploaded_file = st.file_uploader("üìÇ Upload an image", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            is_binary = class_name == "covid"
            inv_labels = CLASS_LABELS.get(class_name)
            predict_image(CLASS_MODEL_MAP[class_name], uploaded_file, is_binary, inv_labels)
    else:
        st.warning("‚ö†Ô∏è Invalid class. Try: covid, brain, or alzheimer.")
