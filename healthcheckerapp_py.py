# -*- coding: utf-8 -*-
"""healthcheckerapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HF3HtWcbGulDItoUdLITLyXfq1P2dbK5
"""

!pip install streamlit

!ls -lh /content/brain_model.h5

import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import os
import gdown

# Constants
IMG_SIZE = 224

# Google Drive File IDs
MODEL_IDS = {
    "covid": "10vU_bpL1dv-m1LrtmQXFEHPnB6Om3dLf",
    "brain": "1q-9E1ClSyZaTQUndee84GAhohJtxSqeO",
    "alzheimer": "1O0aGbCvC_cLhDxxIqAdTPBK_DqGp76a7"
}

# Local filenames
MODEL_FILES = {
    "covid": "covid_model.h5",
    "brain": "brain_model.h5",
    "alzheimer": "alzheimer_model.h5"
}

# Class label mapping
CLASS_LABELS = {
    "alzheimer": ["NonDemented", "VeryMildDemented", "MildDemented", "ModerateDemented"],
    "brain": ["No Tumor", "Tumor"]
}

# Download model if not present
def download_model(file_id, filename):
    url = f"https://drive.google.com/uc?id={file_id}"
    if not os.path.exists(filename):
        with st.spinner(f"üì• Downloading {filename}..."):
            gdown.download(url, filename, quiet=False)
        st.success(f"‚úÖ Downloaded: {filename}")

# Image prediction logic
def predict_image(model_path, image_file, is_binary=True, inv_labels=None):
    model = load_model(model_path)
    st.success(f"‚úÖ Model Loaded: {model_path}")

    img = load_img(image_file, target_size=(IMG_SIZE, IMG_SIZE))
    st.image(img, caption="Uploaded Image", use_column_width=True)

    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    prediction = model.predict(img_array)

    if is_binary:
        score = prediction[0][0]
        st.write("üîç Prediction Score:", score)
        if score <= 0.5:
            st.error("üß™ Result: Positive")
        else:
            st.success("üß™ Result: Negative")
    else:
        index = np.argmax(prediction)
        label = inv_labels[index] if inv_labels else f"Class {index}"
        st.write("üîç Prediction Probabilities:", prediction[0])
        st.info(f"üß† Predicted Class: {label}")

# Streamlit UI
st.title("üß¨ Multi-Disease Image Classifier")

class_name = st.text_input("üìå Enter class (covid / brain / alzheimer):").strip().lower()

if class_name:
    if class_name in MODEL_IDS:
        # Download model if not available
        download_model(MODEL_IDS[class_name], MODEL_FILES[class_name])
        
        uploaded_file = st.file_uploader("üìÇ Upload an image", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            is_binary = class_name == "covid"
            inv_labels = CLASS_LABELS.get(class_name)
            predict_image(MODEL_FILES[class_name], uploaded_file, is_binary, inv_labels)
    else:
        st.warning("‚ö†Ô∏è Invalid class. Use: covid, brain, or alzheimer.")
